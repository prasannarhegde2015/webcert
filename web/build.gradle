apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'

def webappOutputDir = 'build/apps/'
def webappTestOutputDir = 'build/karma/'

grunt {
    colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
}

node {
    version = '6.6.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = projectDir
    nodeModulesDir = projectDir
}

task jsTests(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappTestOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test', "--outputDir=${webappTestOutputDir}", '--run-coverage=' + (project.findProperty('codeCoverage') != null ? 'true' : '')]
}

test.dependsOn(jsTests)

task jsInclude(type: NodeTask, dependsOn: npmInstall) {
    inputs.dir("$projectDir/src/main/resources")
    inputs.dir("$projectDir/src/main/webapp")
    inputs.files(fileTree(projectDir).include('*.js'))
    inputs.files(fileTree(projectDir).include('*.json'))
    inputs.files(configurations.compile)
    outputs.dir(webappOutputDir)

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['default', "--outputDir=${webappOutputDir}"]
}

war.dependsOn(jsInclude)
war.dependsOn createVersionPropertyFile

task unzipBuildTools(type: Copy) {
    into "$buildDir/build-tools/"
    from {
        def intygJar = project.rootProject.buildscript.configurations.classpath.find {
            it.name.contains("gradle-intyg")
        }
        zipTree(intygJar)
    }
}

task jsCodeQuality(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
    outputs.upToDateWhen { false }

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['lint']
}

checkstyleMain.dependsOn jsCodeQuality
jsCodeQuality.onlyIf { project.hasProperty('codeQuality') }

war {
    from("${buildDir}/apps")

    exclude '**/*.scss'
    exclude '**/*.spec.js'
    exclude '**/*.test.js'
}

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:9088/"
    include '**/*IT*'
}

gretty {
    integrationTestTask = null
    contextPath = '/'
    httpPort = 9088
    scanInterval = 0

    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-web.xml")

    def minified = System.properties['webcert.useMinifiedJavaScript'] ?: false

//    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
//               "-Dspring.profiles.active=dev,caching-enabled",
//               "-Dwebcert.resources.folder=${projectDir}/../src/main/resources",
//               "-Dcredentials.file=${projectDir}/webcert-credentials.properties",
//               "-Dwebcert.config.file=${projectDir}/webcert-dev.properties",
//               "-Dwebcert.logback.file=${projectDir}/webcert-logback.xml",
//               "-Dwebcert.useMinifiedJavaScript=${minified}",
//               "-Dh2.tcp.port=9094",
//               "-Dh2.web.port=9090",
//               "-Djetty.port=9088"]

    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled,wc-security-test",
               "-Dwebcert.config.folder=/Users/eriklupander/intyg/webcert-konfiguration/sambi/",
               "-Dwebcert.resources.folder=${projectDir}/../src/main/resources",
               "-Dcredentials.file=/Users/eriklupander/intyg/webcert-konfiguration/sambi/credentials.properties",
               "-Dwebcert.config.file=/Users/eriklupander/intyg/webcert-konfiguration/sambi/webcert.properties",
               "-Dwebcert.logback.file=/Users/eriklupander/intyg/webcert-konfiguration/sambi/webcert-logback.xml",
               "-Dwebcert.useMinifiedJavaScript=${minified}",
               "-Dh2.tcp.port=9094",
               "-Dh2.web.port=9090",
               "-Djetty.port=9088",
               "-Dwebcert.stubs.port=9088"]

    extraResourceBase webappOutputDir
}

configurations {
    // This is required to make the Schematron implementation pick up Saxon instead of Xalan.
    runtime {
        exclude group: 'xalan', module: 'xalan'
    }
}

dependencies {
    compile project(':fmb-integration')
    compile project(':pp-integration')
    compile project(':notification-sender')
    compile project(':fk-stub')
    compile project(':notification-stub')
    compile project(':intygstjanst-stub')
    compile project(':mail-stub')

    compile "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
    compile "se.funktionstjanster.grp:funktionstjanster-grp-schemas:${funktionstjansterGrpSchemasVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.infra:pu-integration:${infraVersion}"
    compile "se.inera.intyg.infra:loggtjanst-stub:${infraVersion}"
    compile "se.inera.intyg.infra:security-siths:${infraVersion}"
    compile "se.inera.intyg.infra:common-cache-metrics:${infraVersion}"

    compile "se.inera.intyg.common:ts-bas:${commonVersion}"
    compile "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    compile "se.inera.intyg.common:luse:${commonVersion}"
    compile "se.inera.intyg.common:lisjp:${commonVersion}"
    compile "se.inera.intyg.common:luae_na:${commonVersion}"
    compile "se.inera.intyg.common:luae_fs:${commonVersion}"

    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.apache.lucene:lucene-analyzers-common:${luceneAnalyzersCommonVersion}"
    compile "org.opensaml:opensaml:${opensamlVersion}"
    compile "org.opensaml:openws:${openWsVersion}"
    compile "org.opensaml:xmltooling:${xmlToolingVersion}"
    compile("io.swagger:swagger-jaxrs:${jaxrsVersion}") {
        exclude(module: "jsr311-api")
    }

    compileOnly "javax.servlet:servlet-api:${servletApiVersion}"
    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"

    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile "javax.servlet:javax.servlet-api:${servletApiVersion}"
    testCompile "org.kubek2k:springockito:${springockitoVersion}"
    testCompile "xmlunit:xmlunit:${xmlUnitVersion}"
    testCompile "com.jayway.restassured:rest-assured:${restassuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${jsonSchemaValidatorVersion}"
    testCompile "org.antlr:ST4:${stAntlr4Version}"

    testRuntime "com.h2database:h2:${h2Version}"

    apt "com.google.auto.value:auto-value:${autovalueVersion}"

    gretty "org.apache.activemq:activemq-client:${activeMqVersion}"
    gretty "org.apache.activemq:activemq-broker:${activeMqVersion}"
    gretty "com.h2database:h2:${h2Version}"
    gretty "mysql:mysql-connector-java:${mysqlVersion}"
}
